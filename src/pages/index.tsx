import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { GameForm } from "../components/GameForm";
import { trpc } from "../utils/trpc";

import DatePicker from "react-datepicker";

import "react-datepicker/dist/react-datepicker.css";

const Home: NextPage = () => {
  const hello = trpc.proxy.example.getAll.useQuery();
  const [startDate, setStartDate] = useState(
    new Date("2022-01-01T00:00:00.000Z")
  );
  const [endDate, setEndDate] = useState(new Date());
  const games = trpc.proxy.games.getAll.useQuery({
    startDate,
    endDate,
  });

  return (
    <>
      <div className="w-full max-w-m">
        <div className="m-8 text-5xl font-bold mt-0 mb-6"> THE GAMES</div>
        <div className="m-8 w-80 flex justify-between">
          <span>From</span>
          <div className="w-28">
            <DatePicker
              selected={startDate}
              onChange={(date: Date) => setStartDate(date)}
            />
          </div>
          <span>To</span>
          <div className="w-28">
            <DatePicker
              selected={endDate}
              onChange={(date: Date) => setEndDate(date)}
            />
          </div>
        </div>
        {/* 
      <GameForm></GameForm> 
      */}
        {games &&
          games.data?.map((g) => {
            const redTeamScore = g.scores.find((s) => s.teamId === 1);
            const blackTeamScore = g.scores.find((s) => s.teamId === 2);
            return (
              <p key={g.id}>
                {g.id} - {g.date && new Date(g.date).toLocaleDateString()} - Red
                Team: {redTeamScore?.scoreValue} - Black Team:
                {blackTeamScore?.scoreValue}
              </p>
            );
          })}
        <p></p>
      </div>
    </>
  );
  // return (
  //   <>
  //     <Head>
  //       <title>Create T3 App</title>

  //       <meta name="description" content="Generated by create-t3-app" />
  //       <link rel="icon" href="/favicon.ico" />
  //     </Head>
  //     <main className="container flex flex-col items-center justify-center min-h-screen p-4 mx-auto">
  //       <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
  //         <span className="text-purple-300">ITCH</span>
  //       </h1>
  //       <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-2 lg:w-2/3">
  //         <TechnologyCard
  //           name="NextJS"
  //           description="The React framework for production"
  //           documentation="https://nextjs.org/"
  //         />
  //         <TechnologyCard
  //           name="TypeScript"
  //           description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
  //           documentation="https://www.typescriptlang.org/"
  //         />
  //         <TechnologyCard
  //           name="TailwindCSS"
  //           description="Rapidly build modern websites without ever leaving your HTML"
  //           documentation="https://tailwindcss.com/"
  //         />
  //         <TechnologyCard
  //           name="tRPC"
  //           description="End-to-end typesafe APIs made easy"
  //           documentation="https://trpc.io/"
  //         />
  //       </div>
  //       <div className="flex items-center justify-center w-full pt-6 text-2xl text-blue-500">
  //         {hello.data ? <p>{hello.data}</p> : <p>Loading..</p>}
  //       </div>
  //     </main>
  //   </>
  // );
};

export default Home;

// Technology component
interface TechnologyCardProps {
  name: string;
  description: string;
  documentation: string;
}

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
